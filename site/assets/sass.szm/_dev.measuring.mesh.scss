@charset "utf-8";

/////////////////////////////////////////////////////////////////////////////
//
//  # tinklelio-mesh'o generavimas su background'o sluoksniais, kuriuose linear-gradient()
//
/////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------
// - fiksuotas tinklelio-mesh'o zingsnis
// - visi matavimo vienetai
//-----------------------------------------------------------------------

// @PARAMS:
// $steps
//   (stepLength stepDivide)
//     stepLength — ilgis pagrindinio tinklelio žingsnio
//     stepDivide — skaičius į kiek padalinamas pagrindinis tinklelio žingsnis
//   (100px 10)

// @USAGE:
// @include szm-dev-mesh_bg-uniform(50px 5);

@mixin szm-dev-mesh_bg-uniform($steps) {
  $stepLength: list-nth($steps, 1);
  $stepDivide: list-nth($steps, 2);

  $gridSizeSub: if(unit($stepLength) == "%", 100% / $stepDivide, $stepLength / $stepDivide);
  $gradientStops: ();
  @for $i from 1 to $stepDivide {
    $gridSizeSubStep: $gridSizeSub * $i;
    $gradientStops: append($gradientStops, transparent $gridSizeSubStep, comma);
    $gradientStops: append($gradientStops, var(--szm-dev-mesh-lineSubColor) $gridSizeSubStep, comma);
    $stopForUnit: if(unit($stepLength) == px, $gridSizeSubStep + 1, calc(#{$gridSizeSubStep} + 1px));
    $gradientStops: append($gradientStops, var(--szm-dev-mesh-lineSubColor) $stopForUnit, comma);
    $gradientStops: append($gradientStops, transparent $stopForUnit, comma);
  }
  //@debug $gradientStops;
  //@return
  background:
    // pagrindinės linijos — horizontali pirmoji viršutinė
    linear-gradient(0grad, var(--szm-dev-mesh-lineMainColor), var(--szm-dev-mesh-lineMainColor)) no-repeat 0 0 / 100% 1px,
    // pagrindinės linijos — vertikali pirmoji kairėje
    linear-gradient(-100grad, var(--szm-dev-mesh-lineMainColor), var(--szm-dev-mesh-lineMainColor)) no-repeat 0 1px / 1px calc(100% - 2px),
    // pagrindinės linijos — tinklelis
    linear-gradient(0grad, var(--szm-dev-mesh-lineMainColor) 1px, transparent 1px) repeat-y 1px 0 / calc(100% - 2px) #{$stepLength},
    linear-gradient(-100grad, var(--szm-dev-mesh-lineMainColor) 1px, transparent 1px) repeat-x 0 1px / #{$stepLength} calc(100% - 2px),
    // pagalbinės linijos — tinklelis
    linear-gradient(0grad, $gradientStops) repeat-y 1px 0 / calc(100% - 2px) #{$stepLength},
    linear-gradient(-100grad, $gradientStops) repeat-x 0 1px / #{$stepLength} calc(100% - 2px) !important;
}

//-----------------------------------------------------------------------
// - tinklelis dalina visą tagą-konteinerį į lygias dalis
// - horizontalus ir vertikalus dalinimų skaičius gali būti skirtingas
//-----------------------------------------------------------------------

// @PARAMS:
// $contDivs
//   nurodant tik horizontalias linijas, vertikalios daromos tokios pačios:
//     (divHorMain divHorSub)
//     (3 3)
//     (5 3)
//   nurodant ir horizontalias, ir vertikalias linijas:
//     (divHorMain divHorSub, divVerMain divVerSub)
//     (3 3, 5 5)

@mixin szm-dev-mesh_bg-divide($contDivs) {
  $contDivsHor: null;
  $contDivsVer: null;

  @if (type_of(list-nth($contDivs, 1)) == "number") {
    // $contDivs == (N N)
    $contDivsHor: $contDivs;
    $contDivsVer: $contDivs;
  }
  @else {
    // $contDivs == (N N, N N)
    $contDivsHor: list-nth($contDivs, 1);
    $contDivsVer: list-nth($contDivs, 2);
  }

  //@debug contDivHor == $contDivsHor;
  //@debug contDivVer == $contDivsVer;

  // mesh horizontal
  $divMainHor-count: nth($contDivsHor, 1);
  $divSubHor-count:  nth($contDivsHor, 2);
  $divMainHor-length: 100% / $divMainHor-count;
  $divSubHor-length:  100% / $divSubHor-count;
  // mesh vertical
  //$gridMainVer-count: if($contDivsVer == "sameAsHor", $divMainHor-count, nth($contDivsVer, 1));
  //$gridSubVer-count:  if($contDivsVer == "sameAsHor", $divSubHor-count,  nth($contDivsVer, 2));
  $gridMainVer-count: nth($contDivsVer, 1);
  $gridSubVer-count:  nth($contDivsVer, 2);
  $gridMainVer-length: 100% / $gridMainVer-count;
  $gridSubVer-length:  100% / $gridSubVer-count;
  //@debug gridSubHor-stepLength = #{$divSubHor-length};

  $divSubHor-gradientStops: ();
  @for $i from 1 to $divSubHor-count {
    $stop: $divSubHor-length * $i;
    $divSubHor-gradientStops: append($divSubHor-gradientStops, transparent $stop, comma);
    $divSubHor-gradientStops: append($divSubHor-gradientStops, var(--szm-dev-mesh-lineSubColor) $stop, comma);
    $divSubHor-gradientStops: append($divSubHor-gradientStops, var(--szm-dev-mesh-lineSubColor) calc(#{$stop} + 1px), comma);
    $divSubHor-gradientStops: append($divSubHor-gradientStops, transparent calc(#{$stop} + 1px), comma);
  }
  //@debug $divSubHor-gradientStops;

  $gridSubVer-gradientStops: ();
  @for $i from 1 to $gridSubVer-count {
    $stop: $gridSubVer-length * $i;
    $gridSubVer-gradientStops: append($gridSubVer-gradientStops, transparent $stop, comma);
    $gridSubVer-gradientStops: append($gridSubVer-gradientStops, var(--szm-dev-mesh-lineSubColor) $stop, comma);
    $gridSubVer-gradientStops: append($gridSubVer-gradientStops, var(--szm-dev-mesh-lineSubColor) calc(#{$stop} + 1px), comma);
    $gridSubVer-gradientStops: append($gridSubVer-gradientStops, transparent calc(#{$stop} + 1px), comma);
  }
  //@debug $gridSubVer-gradientStops;
  //@return

  background:
    // pagrindinės linijos — horizontali pirmoji viršutinė
    linear-gradient(0grad, var(--szm-dev-mesh-lineMainColor), var(--szm-dev-mesh-lineMainColor)) no-repeat 0 0 / 100% 1px,
      // pagrindinės linijos — vertikali pirmoji kairėje
    linear-gradient(-100grad, var(--szm-dev-mesh-lineMainColor), var(--szm-dev-mesh-lineMainColor)) no-repeat 0 1px / 1px calc(100% - 2px),
      // pagrindinės linijos — tinklelis
    linear-gradient(0grad, var(--szm-dev-mesh-lineMainColor) 1px, transparent 1px) repeat-y 1px 0 / calc(100% - 2px) #{$gridMainVer-length},
    linear-gradient(-100grad, var(--szm-dev-mesh-lineMainColor) 1px, transparent 1px) repeat-x 0 1px / #{$divMainHor-length} calc(100% - 2px),
      // pagalbinės linijos — tinklelis
    linear-gradient(-100grad, $divSubHor-gradientStops) repeat-x 0 1px / #{$divMainHor-length} calc(100% - 2px),
    linear-gradient(0grad, $gridSubVer-gradientStops) repeat-y 1px 0 / calc(100% - 2px) #{$gridMainVer-length} !important;
}

/////////////////////////////////////////////////////////////////////////////
//
//  # mesh
//
/////////////////////////////////////////////////////////////////////////

// prideda background'ą į patį tagą
// class="~M ..."

// prideda background'ą į tago ::after
// class="~MA ..."



// class="~MS ~MU50px:5 ~MCred"
// class="~MA ~MU50px:5 ~MCred"

// ~MU50px:5
// ~MU50px:5a
//
// .\~MU50px\:5 { }
// .\~MU50px\:5a { }
//
// .\~MD3\:3 { }
// .\~MD3\:3A { }

.\~M {
}

.\~MA {
  position: relative;
  &::after {
    content:  "";
    position: absolute;
    top:      0;
    left:     0;
    width:    100%;
    height:   100%;
  }
}

// @USAGE:
// @include szm-dev-mesh_selector-uniform((50px 5, 100px 10));

@mixin szm-dev-mesh_selector-uniform($meshSizes) {
  @each $meshSize in $meshSizes {
    $stepLength: list-nth($meshSize, 1);
    $stepDivide: list-nth($meshSize, 2);

    //@debug $stepLength;
    //@debug $stepDivide;

    $selector: \~M#{$stepLength}\:#{$stepDivide};

    .\~M.#{$selector}, .\~MA.#{$selector}::after {
      @include szm-dev-mesh_bg-uniform($meshSize);
    }
  }
}

// (
//  3 3,
//  (5 3, 3 3)
// )

// @USAGE:
// @include szm-dev-mesh_selector-divide((
//   3 3,
//   5 5,
//   (5 3, 3 3)
// ));

@mixin szm-dev-mesh_selector-divide($meshSizes) {
  @each $contDivs in $meshSizes {
    $contDivsHor: null;
    $contDivsVer: null;
    $selectorSize: null;

    @if (type_of(list-nth($contDivs, 1)) == "number") {
      // $contDivs == (N N)
      $selectorSize: list-nth($contDivs, 1) + \: + list-nth($contDivs, 1);
    }
    @else {
      // $contDivs == (N N, N N)
      $contDivsHor: list-nth($contDivs, 1);
      $contDivsVer: list-nth($contDivs, 2);
      $selectorSize: list-nth($contDivsHor, 1) + \: + list-nth($contDivsHor, 2) + \| +
                     list-nth($contDivsVer, 1) + \: + list-nth($contDivsVer, 2);
    }

    //@debug contDivHor == $contDivsHor;
    //@debug contDivVer == $contDivsVer;

    $selector: \~M#{$selectorSize};

    .\~M.#{$selector}, .\~MA.#{$selector}::after {
      @include szm-dev-mesh_bg-divide($contDivs);
    }
  }
}

//-----------------------------------------------------------------------
// sukuria CSS kintamuosius, kurie nustato mesh'o linijų spalvas
//-----------------------------------------------------------------------

// @PARAMS:
// $colorSets
//   (
//     <colorSetName>: <lineMainColor> <lineSubColor>,
//     ...
//   )

// @USAGE:
// @include szm-dev-mesh_selector-color((
//   red: hsla(0, 100%, 50%, 0.7) hsla(0, 100%, 50%, 0.2),
//   blue: hsla(240, 100%, 50%, 0.8) hsla(240, 100%, 50%, 0.2),
// ));
//

@mixin szm-dev-mesh_selector-color($colorSets) {
  @each $colorSetName, $colorValues in $colorSets {
    $colorMain: list-nth($colorValues, 1);
    $colorSub: list-nth($colorValues, 2);

    //@debug $colorMain;
    //@debug $colorSub;

    $selector: \~M#{$colorSetName};

    .\~M.#{$selector}, .\~MA.#{$selector}::after {
      //@include szm-dev-mesh_color($colorMain, $colorSub);
      --szm-dev-mesh-lineMainColor: #{$colorMain};
      --szm-dev-mesh-lineSubColor:  #{$colorSub};
    }
  }
}

//@mixin szm-dev-mesh_color($lineMainColor, $lineSubColor) {
//  --szm-dev-mesh-lineMainColor: #{$lineMainColor};
//  --szm-dev-mesh-lineSubColor:  #{$lineSubColor};
//}










//$szm-dev-mesh_cssVar-lineMainColor: --szm-dev-mesh-lineMainColor;
//$szm-dev-mesh_cssVar-lineSubColor:  --szm-dev-mesh-lineSubColor;

//var(--szm-dev-mesh-lineMainColor)
//var(--szm-dev-mesh-lineSubColor)

// @USAGE:
//   .d-mesh {
//     background: szm-dev-mesh_bg-uniform(<...>);
//   }

//@function szm-dev-mesh_bg-uniform($lineMainColor, $lineSubColor, $gridSize, $gridSubNumber: 5) {
//@function szm-dev-mesh_bg-uniform($lineSteps) {

//@mixin szm-dev-mesh_bg-uniform($stepLength, $stepSubDivide: 5) {
//$mainColor: var($szm-dev-mesh_cssVar-lineMainColor);
//$subColor:  var($szm-dev-mesh_cssVar-lineSubColor);

//@function szm-dev-mesh_bg-divide($contDivs) {
//@mixin szm-dev-mesh_bg-divide($contDivHor, $contDivVer: "sameAsHor") {
