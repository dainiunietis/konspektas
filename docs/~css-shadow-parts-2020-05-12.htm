<!doctype html>
<html lang="lt">
<head>
  <meta charset="utf-8">
  <title></title>
  <!--  <link rel="stylesheet" type="text/css" href="assets/sass/master.css">-->
  <!--  <link rel="stylesheet" type="text/css" href="assets/sass/master.utilities.css">-->
  <!--  <link rel="stylesheet" type="text/css" href="assets/sass/master.dev.css">-->
  <style>
    body {
      font: 1.2em "IBM Plex Sans", sans-serif;
      margin: 1em;
      /*background: hsl(0, 0%, 50%);*/
    }

    .pvs {
      outline: 2px dotted lightseagreen;
      outline-offset: .2em;
    }

    /*----------------------------------------------------*/

  </style>
</head>
<body>

<h1>CSS Shadow Parts</h1>

<p>https://css-tricks.com/styling-in-the-shadow-dom-with-css-shadow-parts/</p>

<h2>shadow DOM encapsulation</h2>
<p>Naming collisions between classes can easily crop up in CSS.</p>
<p class="pvz"></p>


<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>

<!--<p>The basic idea of multicol, is that you can take a chunk of content and flow it into multiple columns, as in a newspaper. You do this by using one of two properties. The column-count property specifies the number of columns that you would like the content to break into. The column-width property specifies the ideal width, leaving the browser to figure out how many columns will fit.</p>-->
<!--<p>It doesn't matter which elements are inside the content that you turn into a multicol container, everything remains in normal flow, but broken into columns. This makes multicol unlike other layout methods that we have in browsers today. Flexbox and Grid for example, take the child elements of the container and those items then participate in a flex or grid layout. With multicol, you still have normal flow, except inside a column.</p>-->
<!--<p>In the below example I am using column-width, to display columns of at least 14em. Multicol assigns as many 14emcolumns as will fit and then shares out the remaining space between the columns. Columns will be at least 14em, unless we can only display one column in which case it may be smaller. Multicol was the first time that we saw this kind of behavior in CSS, columns being created which were essentialy responsive by default. You do not need to add Media Queries and change the number of columns for various breakpoints, instead we specify an optimal width and the browser will work it out.</p>-->
<!--<p>The column boxes created when you use one of the column properties can't be targeted. You can't address them with JavaScript, nor can you style an individual box to give it a background color or adjust the padding and margins. All of the column boxes will be the same size. The only thing you can do is add a rule between columns, using the column-rule property, which acts like border. You can also control the gap between columns using the column-gap property, which has a default value of 1em however you can change it to any valid length unit.</p>-->
<!--<p>That is the basic functionality of multicol. You can take a chunk of content and split it into columns. Content will fill the columns in turn, creating columns in the inline direction. You can control the gaps between columns and add a rule, with the same possible values as border. So far so good, and all of the above is very well supported in browsers and has been for a long time, making this spec very safe to use in terms of backwards compatibility.</p>-->
<!--<p>There are some further things you might want to consider with your columns, and some potential issues to be aware of when using columns on the web.</p>-->
<!--<p>Sometimes you might like to break some content into columns, but then cause one element to span across the column boxes. Applying the column-span property to a descendent of the multicol container achieves this.</p>-->
<!--<p>In the example below, I have caused a &lt;blockquote&gt; element to span across my columns. Note that when you do this, the content breaks into a set of boxes above the span, then starts a new set of column boxes below. The content doesn't jump across the spanned element.</p>-->
<!--<p>Be aware that in the current spec, the values for column-span are either all or none. You can't span just some of the columns, but you can get the kind of layout you might see in a newspaper by combining multicol with other layout methods. In this next example, I have a grid container with two column tracks. The left-hand track is 2fr, the right-hand track 1fr. The article in the left-hand track I have turned into a multicol container with two tracks, it also has a spanning element.</p>-->
<!--<p>On the right, we have an aside which goes into the second Grid column track. By playing around with the various layout methods available to us, we can figure out exactly which layout method suits the job at hand â€” don't be afraid to mix and match!</p>-->

</body>
</html>
